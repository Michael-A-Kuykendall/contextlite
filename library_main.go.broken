/*
 * ContextLite Private Library C Interface
 * Copyright (c) 2025 Michael A. Kuykendall
 * 
 * Patent Pending - Provisional Patent Filed
 * 
 * This file provides a C interface for the private ContextLite engine
 * allowing it to be used as a compiled library from the public repository.
 */

//go:build library
// +build library

package main

import "C"
import (
	"context"
	"encoding/json"
	"unsafe"

	// Private imports - only available when building with private binary
	// These imports are conditionally compiled and gracefully handled
)

// Conditional compilation: only build this when library tag is present
// This prevents build errors when private repository is not available

var (
	engines = make(map[int]interface{}) // Use interface{} instead of private type
	nextID  = 1
)

//export CreateEngine
func CreateEngine(configJSON *C.char) C.int {
	// This is a stub implementation for when private binary is not available
	// In production, this would interface with the private binary
	return -1 // Return error code when private engine not available
}

//export DestroyEngine
func DestroyEngine(engineID C.int) {
	// Stub implementation - would cleanup engine resources
	id := int(engineID)
	if _, exists := engines[id]; exists {
		delete(engines, id)
	}
}

//export AssembleContext
func AssembleContext(engineID C.int, requestJSON *C.char) *C.char {
	// Stub implementation - would call private engine
	return C.CString(`{"error": "private engine not available - install ContextLite Pro"}`)
}
	if err != nil {
		errorResp := map[string]string{"error": err.Error()}
		errorJSON, _ := json.Marshal(errorResp)
		return C.CString(string(errorJSON))
	}
	
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return C.CString(`{"error": "serialization failed"}`)
	}
	
	return C.CString(string(resultJSON))
}

//export GetEngineStats
func GetEngineStats(engineID C.int) *C.char {
	id := int(engineID)
	engine, exists := engines[id]
	if !exists {
		return C.CString(`{"error": "engine not found"}`)
	}
	
	stats, err := engine.GetStats()
	if err != nil {
		errorResp := map[string]string{"error": err.Error()}
		errorJSON, _ := json.Marshal(errorResp)
		return C.CString(string(errorJSON))
	}
	
	statsJSON, err := json.Marshal(stats)
	if err != nil {
		return C.CString(`{"error": "serialization failed"}`)
	}
	
	return C.CString(string(statsJSON))
}

//export FreeString
func FreeString(str *C.char) {
	C.free(unsafe.Pointer(str))
}

// Version information
//export GetVersion
func GetVersion() *C.char {
	return C.CString("1.0.0-private")
}

// Required for shared library
func main() {}
